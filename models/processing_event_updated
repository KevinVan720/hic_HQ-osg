#!/usr/bin/env python

import itertools
import os
import sys
import subprocess

import numpy as np
import shutil

# Run a subprocess, concatenating argument strings together
def run_cmd(*args, **kwargs):
    subprocess.check_call(
        list(itertools.chain.from_iterable(a.split() for a in args)),
	**kwargs
    )


def bmsap_multi(collision_sys):
    print ('starting calculate multiplicity ...')
    sampleFile = str('sample_multi.in')
    if collision_sys == 'PbPb2760':
        spectraFile = str('spectra/updated/LHC2760-AA2ccbar.dat')
    elif collision_sys == 'PbPb5020':
        spectraFile = str('spectra/updated/LHC5020-AA2ccbar.dat')
    elif collision_sys == 'AuAu200':
        spectraFile = str('spectra/updated/RHIC200-AA2ccbar.dat')
    else:
        print('not a valid collision system!!!!!')

    multiFile = str('multi_AAcY_updated') + postfix 
    DmesonFile = str('Dmeson_AAcY') + postfix
    os.environ['ftn09'] = sampleFile
    os.environ['ftn10'] = spectraFile
    os.environ['ftn13'] = multiFile
    child = 'cat ' + DmesonFile
    p1 = subprocess.Popen(child.split(), stdout=subprocess.PIPE)
    p2 = subprocess.Popen('./bmsap', stdin=p1.stdout)
    p1.stdout.close()
    output = p2.communicate()[0]


def bmsap_v2(collision_sys):
    print ('starting calculating v2 ...')
    sampleFile = str('sample.in')
    if collision_sys == 'PbPb2760':
        spectraFile = str('spectra/updated/LHC2760-AA2ccbar.dat')
    elif collision_sys == 'PbPb5020':
        spectraFile = str('spectra/updated/LHC5020-AA2ccbar.dat')
    elif collision_sys == 'AuAu200':
        spectraFile = str('spectra/updated/RHIC200-AA2ccbar.dat')
    else:
        print ('not a valid collision system !!!!!')

    v2File = str('v2_AAcY_updated') + postfix
    DmesonFile = str('Dmeson_AAcY') + postfix
    angleFile = str('pp_angle') + postfix
    os.environ['ftn09'] = sampleFile
    os.environ['ftn10'] = spectraFile
    os.environ['ftn13'] = v2File
    os.environ['ftn24'] = angleFile
    child = 'cat ' + DmesonFile
    p1 = subprocess.Popen(child.split(), stdout=subprocess.PIPE)
    p2 = subprocess.Popen('./bmsap', stdin=p1.stdout)
    p1.stdout.close()
    output = p2.communicate()[0]

def bmsap_v2_norotate(collision_sys):
    print ('starting calculating v2 ...')
    sampleFile = str('sample.in')
    if collision_sys == 'PbPb2760':
        spectraFile = str('spectra/updated/LHC2760-AA2ccbar.dat')
    elif collision_sys == 'PbPb5020':
        spectraFile = str('spectra/updated/LHC5020-AA2ccbar.dat')
    elif collision_sys == 'AuAu200':
        spectraFile = str('spectra/updated/RHIC200-AA2ccbar.dat')
    else:
        print ('not a valid collision system !!!!!')

    v2File = str('norotate_v2_AAcY_updated') + postfix
    DmesonFile = str('Dmeson_AAcY') + postfix
    angleFile = str('pp_angle_norotate.dat')
    os.environ['ftn09'] = sampleFile
    os.environ['ftn10'] = spectraFile
    os.environ['ftn13'] = v2File
    child = 'cat ' + DmesonFile
    p1 = subprocess.Popen(child.split(), stdout=subprocess.PIPE)
    p2 = subprocess.Popen('./bmsap', stdin=p1.stdout)
    p1.stdout.close()
    output = p2.communicate()[0]





def participant_plane_angle():
    initialFile = str('initial') + postfix
    pp_angleFile = str('pp_angle') + postfix
    no_angleFile = str('pp_angle_norotate.dat')
    ed = np.loadtxt(initialFile)
    x_init = np.linspace(-13, 13, 261)
    y_init = np.linspace(-13, 13, 261)
    rx0 , ry0 = np.meshgrid(x_init, y_init)
    x0 = np.sum(rx0 * ed) / np.sum(ed)
    y0 = np.sum(ry0 * ed) / np.sum(ed)
    rx = rx0 - x0
    ry = ry0 - y0
    r = np.sqrt(rx*rx + ry*ry)
    phi = np.arctan2(ry, rx)
    aver_cos = np.sum(r**2 * np.cos(2*phi) * ed) / np.sum(ed)
    aver_sin = np.sum(r**2 * np.sin(2*phi) * ed) / np.sum(ed)
    psi = 0.5 * np.arctan2(aver_sin, aver_cos)
    pp_cos = np.cos(2*psi)
    pp_sin = np.sin(2*psi)
    astring = str(pp_cos) + '   ' + str(pp_sin)
    f = open(pp_angleFile, 'w')
    f.write(astring)
    f.close()
    f2 = open(no_angleFile, 'w')
    f2.write('1.0    0.0')
    f2.close()


if __name__ == '__main__':
    col_sys = sys.argv[2]
    postfix = sys.argv[1]
    bmsap_multi(col_sys)
    participant_plane_angle()
    bmsap_v2_norotate(col_sys)
    bmsap_v2(col_sys)
