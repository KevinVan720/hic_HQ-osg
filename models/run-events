#!/usr/bin/env python3

"""
run several full space-time HQ evolution in heavy-ion collision:
    -- initial conditions (trento + HQ_sample) 
    -- hydro (VISHNew)
    -- HQ transport (Langevin)
    -- HQ hadronization 
    -- light hadron pricilization (osu-sampler)
    -- hadronic afterburner (UrQMD)
"""
from itertools import chain
import itertools
import sys, os
import subprocess

import numpy as np
import h5py
import shutil
from scipy.interpolate import interp1d


def run_cmd(*args, **kwargs):
    print(*args, flush=True)
    subprocess.check_call(
        list(chain.from_iterable(a.split() for a in args)),
        **kwargs
    )


def read_text_file(fileName):
    with open(fileName, 'rb') as f:
        return [l.split() for l in f if not l.startswith(b'#')]

def read_oscar_file(fileName):
    with open(fileName, 'r') as f:
        return [l.replace('D','E').split() for l in f if len(l.split()) == 19]


def run_initial(collision_sys, nevents):
    if collision_sys == 'AuAu200':
        run_cmd('./trento Au Au', str(nevents),
            '--cross-section 4.2',
            '--grid-max 13.05 --grid-step 0.1',
            '--normalization 60  --fluctuation 1.6 --nucleon-width 0.49',
            '--output initial', cwd='trento')
    elif collision_sys == 'PbPb5020':
        run_cmd('./trento Pb Pb', str(nevents),
            '--cross-section 7.0',
            '--grid-max 13.05 --grid-step 0.1',
            '--normalization 160 --fluctuation 1.6 --nucleon-width 0.51',
            '--output initial', cwd='trento')
    elif collision_sys == 'PbPb2760':
        run_cmd('./trento Pb Pb', str(nevents),
            '--cross-section 6.4',
            '--grid-max 13.05 --grid-step 0.1',
            '--normalization 131 --fluctuation 1.6 --nucleon-width 0.51',
            '--output initial', cwd='trento')
    else:
        print('Not a valid collision system')

       

       
def run_hydro():
    run_cmd('./vishnew etas=0.08 etas_slope=0.75 vishbulknorm=1.1 edec=0.24', cwd='vishnew')

 

def run_HQsample():
    run_cmd('./HQ_sample HQ_sample.conf', cwd='HQ_sample')


def run_diffusion(args):
    os.environ['ftn10'] = 'dNg_over_dt_cD6.dat'
    os.environ['ftn20'] = 'HQ_AAcY.dat'
    os.environ['ftn30'] = 'initial_HQ.dat'
    run_cmd('./diffusion', str(args), cwd='diffusion')


def run_fragPLUSrecomb():
    os.environ['ftn20'] = 'Dmeson_AAcY.dat'
    child1 = 'cat HQ_AAcY.dat'
    p1 = subprocess.Popen(child1.split(), stdout = subprocess.PIPE)
    p2 = subprocess.Popen('./fragPLUSrecomb', stdin=p1.stdout)
    p1.stdout.close()
    output = p2.communicate()[0]


def participant_plane_angle():
    initialFile = 'initial.dat'
    pp_angleFile = 'pp_angle.dat'
    ed = np.loadtxt(initialFile)
    x_init = np.linspace(-13,13, 261)
    y_init = np.linspace(-13,13, 261)
    rx0, ry0 = np.meshgrid(x_init, y_init)
    x0 = np.sum(rx0 * ed) / np.sum(ed)
    y0 = np.sum(ry0 * ed) / np.sum(ed)
    rx = rx0 - x0
    ry = ry0 - y0

    r = np.sqrt(rx*rx + ry*ry)
    phi = np.arctan2(ry,rx)
    aver_cos = np.sum(r**2 * np.cos(2*phi) * ed) / np.sum(ed)
    aver_sin = np.sum(r**2 * np.sin(2*phi) * ed) / np.sum(ed)

    psi = 0.5*np.arctan2(aver_sin, aver_cos)
    pp_cos = np.cos(2*psi)
    pp_sin = np.sin(2*psi)
    astring = str(pp_cos) + '    ' + str(pp_sin)
    f = open(pp_angleFile, 'w')
    f.write(astring)
    f.close()


def bmsap_multi(collision_sys):
    sampleFile = 'sample_multi.in'
    if collision_sys == 'PbPb2760':
        spectraFile = 'spectra/LHC2760-AA2ccbar.dat'
    elif collision_sys == 'PbPb5020':
        spectraFile = 'spectra/LHC5020-AA2ccbar.dat'
    elif collision_sys == 'AuAu200':
        spectraFile = 'spectra/RHIC200-AA2ccbar.dat'
    else:
        print('not a valid collision system!!')

    multiFile = 'multi_AAcY.dat' 
    DmesonFile = 'Dmeson_AAcY.dat'
    os.environ['ftn09'] = sampleFile
    os.environ['ftn10'] = spectraFile
    os.environ['ftn13'] = multiFile

    child2 = 'cat ' + DmesonFile
    p3 = subprocess.Popen(child2.split(), stdout = subprocess.PIPE)
    p4 = subprocess.Popen('./bmsap', stdin = p3.stdout)
    p3.stdout.close()
    output = p4.communicate()[0]

 
def bmsap_v2(collision_sys):
    sampleFile = 'sample.in'
    if collision_sys == 'PbPb2760':
        spectraFile = 'spectra/LHC2760-AA2ccbar.dat'
    elif collision_sys == 'PbPb5020':
        spectraFile = 'spectra/LHC5020-AA2ccbar.dat'
    elif collision_sys == 'AuAu200':
        spectraFile = 'spectra/RHIC200-AA2ccbar.dat'
    else:
        print('not a valid collision system!!!')

    v2File = 'v2_AAcY.dat'
    DmesonFile = 'Dmeson_AAcY.dat'
    angleFile = 'pp_angle.dat'
    os.environ['ftn09'] = sampleFile
    os.environ['ftn10'] = spectraFile
    os.environ['ftn13'] = v2File
    os.environ['ftn24'] = angleFile
    child3 = 'cat ' + DmesonFile
    p5 = subprocess.Popen(child3.split(), stdout = subprocess.PIPE)
    p6 = subprocess.Popen('./bmsap', stdin=p5.stdout)
    p5.stdout.close()
    output = p6.communicate()[0]


def run_afterburner(ievent):
    surfaceFile = 'sampler/surface.dat'
    eventinfo_File = 'sampler/{0}.info.dat'.format(str(ievent))
    
    # now particalize the hypersurface
    if os.stat(surfaceFile).st_size == 0:
        print('empty hypersurface')
        return 0

    finfo = open(eventinfo_File, 'r')
    finfo.seek(0)
    for line in finfo:
        inputline = line.split()
        if len(inputline) > 1:
            if inputline[0] == 'mult':
                initial_mult = float(inputline[2])
            else:
                continue
        else:
            continue
    finfo.close()

    nsamples = min(max(int(2*1e5/initial_mult),2),100)

    run_cmd('./sampler oversamples={}'.format(nsamples), cwd='sampler')

    # a non-empty hypersurface can still emit zero particles. If no event produced by any particles, 
    # the output wil contain the three-line OSCAR header and nothing else. In this case, end the event here
    with open('sampler/oscar.dat', 'rb') as f:
        if next(itertools.islice(f,3,None), None) is None:
            print('no particles emitted')
            return 0
   
    run_cmd('./afterburner {} urqmd_final.dat'.format(nsamples), cwd='urqmd-afterburner')
    return nsamples


def Dmeson_dNdpTdy(collision_sys, px, py, initial_pT):
    if os.path.isdir('spectra'):
        spectraFolder = './spectra/'
    else:
        spectraFolder = './'

    if collision_sys == 'PbPb2760':
        spectraFile = spectraFolder + 'LHC2760-AA2ccbar.dat'
    elif collision_sys == 'PbPb5020':
        spectraFile = spectraFolder + 'LHC5020-AA2ccbar.dat'
    elif collision_sys == 'AuAu200':
        spectraFile = spectraFolder + 'RHIC200-AA2ccbar.dat'
    else:
        print('not a valid collision system!')

    pT_AA, dsigmadpT2_AA = np.loadtxt(spectraFile, unpack=True)
    dsigmadpT_AA = pT_AA * dsigmadpT2_AA
    sigma_AA = dsigmadpT_AA.sum() * (pT_AA[1] - pT_AA[0])
    dsigmadpT_AA = dsigmadpT_AA / sigma_AA
    dfdpT = interp1d(pT_AA, dsigmadpT_AA)

    final_pT = np.sqrt(px**2+ py**2)
    pT_weight = dfdpT(initial_pT)
    dNdpT, pT_bins = np.histogram(final_pT, bins=40, range=(0.5, 40.5), weights=pT_weight)
    return dNdpT, pT_bins[:-1]
  
   

def Dmeson_Raa_v2(collision_sys, ID, px, py, initial_pT, RaaFile, v2File):
    if os.path.isdir('spectra'):
        spectraFolder = './spectra/'
    else:
        spectraFolder = './'

    if collision_sys == 'PbPb2760':
        spectraFile = spectraFolder + 'LHC2760-AA2ccbar.dat'
    elif collision_sys == 'PbPb5020':
        spectraFile = spectraFolder + 'LHC5020-AA2ccbar.dat'
    elif collision_sys == 'AuAu200':
        spectraFile = spectraFolder + 'RHIC200-AA2ccbar.dat'
    else:
        print('not a valid collision system!')

    pT_AA, dsigmadpT2_AA = np.loadtxt(spectraFile, unpack=True)
    dsigmadpT_AA = pT_AA * dsigmadpT2_AA
    sigma_AA = dsigmadpT_AA.sum() * (pT_AA[1] - pT_AA[0])
    dsigmadpT_AA = dsigmadpT_AA / sigma_AA
    dfdpT = interp1d(pT_AA, dsigmadpT_AA)

    final_pT = np.sqrt(px**2+ py**2)

    initial_pT_D0 = initial_pT[ID == 421]
    final_pT_D0 = final_pT[ID==421]
    pT_weight = dfdpT(initial_pT_D0)
    dNdpT_D0, pT_bins = np.histogram(final_pT_D0, bins=79, range=(0.5, 40.0), weights=pT_weight)

    initial_pT_Dplus = initial_pT[ID==411]
    final_pT_Dplus = final_pT[ID==411]
    pT_weight = dfdpT(initial_pT_Dplus)
    dNdpT_Dplus, pT_bins = np.histogram(final_pT_Dplus, bins=79, range=(0.5, 40.0), weights=pT_weight)

    initial_pT_Dstar = initial_pT[ID==10411]
    final_pT_Dstar = final_pT[ID==10411]
    pT_weight = dfdpT(initial_pT_Dstar)
    dNdpT_Dstar, pT_bins = np.histogram(final_pT_Dstar, bins=79, range=(0.5, 40.0), weights=pT_weight)


    pT_weight = dfdpT(initial_pT)
    dNdpT, pT_bins = np.histogram(final_pT, bins=79, range=(0.5, 40.0), weights=pT_weight)
   
    np.savetxt(RaaFile, (pT_bins[:-1], dNdpT, dNdpT_D0, dNdpT_Dplus, dNdpT_Dstar), fmt='%10.6f')


    pT_bins = np.linspace(0.5, 39.5, 79)
    if os.path.isfile('pp_angle.dat'):
        angle_ = np.loadtxt('pp_angle.dat')
        pp_cos = angle_[0]
        pp_sin = angle_[1]
    else:
        pp_cos = 1
        pp_sin = 0
    
    final_v2 = ((py**2 - px**2)*pp_cos + 2.*(px*py*pp_sin)) / (final_pT**2)
    final_v2_with_weight = final_v2 * pT_weight
    
    v2 = []
    v2_weight = []
    for i in range(len(pT_bins)-1):
        cut = (final_pT > pT_bins[i]) & (final_pT < pT_bins[i+1])
        v2_sum = final_v2_with_weight[cut].sum() 
        weight_sum = pT_weight[cut].sum()
        v2.append(v2_sum/weight_sum)
        v2_weight.append(weight_sum)

    np.savetxt(v2File, (pT_bins[:-1], np.array(v2), np.array(v2_weight)), fmt='%10.6f')


def calculate_variable_beforeUrQMD(collision_sys, DmesonFile):
    NUM, ID, px, py, pz, p0, mass, rx, ry, rx, r0, temp, c_vx, c_vy, c_vz, ed, ip0, ipT, wt = (
        np.array(col, dtype=dtype) for (col, dtype) in 
        zip(
            zip(*read_oscar_file(DmesonFile)),
            (2*[int] + 17*[float])
        )
    )

    abs_ID = np.abs(ID)
    y = 0.5 * np.log((p0+pz)/(p0-pz))
    midrapidity = (np.fabs(y)<0.5)
    #------------------------------------------------------------------------------------------------
    # Dmeson Raa and v2 (event-plane method, before UrQMD)
    px_Dmeson = px[midrapidity]
    py_Dmeson = py[midrapidity]
    ipT_Dmeson = ipT[midrapidity]
    ID_Dmeson = abs_ID[midrapidity]
    RaaFile = 'multi_AAcY_beforeUrqmd.dat'
    v2File = 'v2_AAcY_beforeUrqmd.dat'
    Dmeson_Raa_v2(collision_sys, ID_Dmeson, px_Dmeson, py_Dmeson, ipT_Dmeson, RaaFile, v2File)


    y_bins = np.arange(-5, 5.5, 0.5)
    result_beforeUrQMD = []
    for i in range(len(y_bins) -1):
        y_lower = y_bins[i]
        y_higher = y_bins[i+1]
        cut = (y > y_lower) & (y < y_higher)
        px_Dmeson = px[cut]
        py_Dmeson = py[cut]
        ipT_Dmeson = ipT[cut]

        dNdpTdy, _ = Dmeson_dNdpTdy(collision_sys, px_Dmeson, py_Dmeson, ipT_Dmeson)
        result_beforeUrQMD.append(dNdpTdy)

    result_beforeUrQMD = np.array(result_beforeUrQMD)
    outputFile = 'multi_Dmeson_dNdy_beforeUrQMD.dat'
    np.savetxt(outputFile, result_beforeUrQMD, fmt='%10.6f')


def calculate_variable(collision_sys, urqmdFile, nsamples):
    species = [
        ('pion', 211),
        ('kaon', 321),
        ('proton', 2212)
    ]
    

    float_t = '<f8'
    int_t = '<i8'
    complex_t = '<c16'

    res = np.zeros(1, dtype=[
        ('nsamples', int_t),
        ('dNch_deta', float_t),
        ('dN_dy',[(s, float_t) for (s, _) in species]),
        ('mean_pT', [(s, float_t) for (s,_) in species]),
        ('M', int_t),
        ('Qn', complex_t, 6),
        ('N_D', int_t),
    ])

    res['nsamples'] = nsamples
    #----------------------------------------------------------------------
    ID, charge, mass, px, py, pz, y, eta, ipT, wt = (
        np.array(col, dtype=dtype) for (col, dtype) in 
        zip(
            zip(*read_text_file(urqmdFile)),
            (2*[int] + 8*[float])
        )
    )

    pT = np.sqrt(px**2 + py**2)
    phi = np.arctan2(py, px)
    abs_ID = np.abs(ID)
    abs_eta = np.fabs(eta)
    light_ID = ((abs_ID !=411) & (abs_ID !=421) & (abs_ID !=10411) & (abs_ID !=10421))
    charged = (charge != 0)
    Dmeson_ID = ((abs_ID == 411) | (abs_ID == 421) | (abs_ID == 10411) | (abs_ID == 10421))
    midrapidity = (np.fabs(y) < 0.5)

    res['N_D'] = np.count_nonzero(Dmeson_ID)
    res['dNch_deta'] = np.count_nonzero(charged & (abs_eta < 0.5) & light_ID) / nsamples
    phi_ALICE = phi[charged & (abs_eta < 0.8) & (pT > 0.2) & (pT < 5) & light_ID]
    res['M'] = phi_ALICE.size
    res['Qn'] = [np.exp(1j*n*phi_ALICE).sum() for n in range(1,7)]

    initialFile = 'initial.dat'
    dum_sd = np.loadtxt(initialFile)
    dum_weight = (dum_sd*dum_sd).sum()

    resultFile = 'result.dat'
    with open(resultFile, 'w') as fo:
        print('# weight-TAA ' + '%15.6e'%dum_weight, file=fo)
        print('# nsamples ' + '%5d'%res['nsamples'], file=fo)
        print('# dNch_deta ' + '%10.3e'%res['dNch_deta'], file=fo)
        print('# M ' + '%10d'%res['M'], file=fo)
        print('# N_D' + '%10d'%res['N_D'], file=fo)
        print('# Q1 '+ str(res['Qn'][0][0]), file=fo)
        print('# Q2 '+ str(res['Qn'][0][1]), file=fo)
        print('# Q3 '+ str(res['Qn'][0][2]), file=fo)
        print('# Q4 '+ str(res['Qn'][0][3]), file=fo)
        print('# Q5 '+ str(res['Qn'][0][4]), file=fo)
        print('# Q6 '+ str(res['Qn'][0][5]), file=fo)

        outputline = '# {:8} {:8} {:8} {:16}'.format('ID', 'mean_pT', 'dN_dy', 'dN+dydpT/(2pi pT)')
        print(outputline, file=fo)
        for name, i in species:
            cut = (abs_ID == i) & midrapidity
            N = np.count_nonzero(cut)
            res['dN_dy'][name] = N/nsamples
            res['mean_pT'][name] = (0. if N==0 else pT[cut].mean())
            print(str(name) + '%10.5f' %res['mean_pT'][name] + '%10.3e'%res['dN_dy'][name], file=fo)

    #------------------------------------------------------------------------------------------------
    # Dmeson Raa and v2 (event-plane method)
    px_Dmeson = px[Dmeson_ID & midrapidity]
    py_Dmeson = py[Dmeson_ID & midrapidity]
    ipT_Dmeson = ipT[Dmeson_ID & midrapidity]
    ID_Dmeson = abs_ID[Dmeson_ID & midrapidity]
    RaaFile = 'multi_AAcY_urqmd.dat'
    v2File = 'v2_AAcY_urqmd.dat'
    Dmeson_Raa_v2(collision_sys, ID_Dmeson, px_Dmeson, py_Dmeson, ipT_Dmeson, RaaFile, v2File)
  
    # Dmeson Raa and v2 (event-plane method) with midrapidity<1
    cenrapidity = (np.fabs(y) < 1.0)
    px_Dmeson = px[Dmeson_ID & cenrapidity]
    py_Dmeson = py[Dmeson_ID & cenrapidity]
    ipT_Dmeson = ipT[Dmeson_ID & cenrapidity]
    ID_Dmeson = abs_ID[Dmeson_ID & cenrapidity]
    RaaFile = 'multi_AAcY_urqmd_y1.dat'
    v2File = 'v2_AAcY_urqmd_y1.dat'
    Dmeson_Raa_v2(collision_sys, ID_Dmeson, px_Dmeson, py_Dmeson, ipT_Dmeson, RaaFile, v2File)
  
    # Dmeson Raa and v2 (event-plane method) with midrapidity<0.8
    cenrapidity = (np.fabs(y) < 0.8)
    px_Dmeson = px[Dmeson_ID & cenrapidity]
    py_Dmeson = py[Dmeson_ID & cenrapidity]
    ipT_Dmeson = ipT[Dmeson_ID & cenrapidity]
    ID_Dmeson = abs_ID[Dmeson_ID & cenrapidity]
    RaaFile = 'multi_AAcY_urqmd_y0d8.dat'
    v2File = 'v2_AAcY_urqmd_y0d8.dat'
    Dmeson_Raa_v2(collision_sys, ID_Dmeson, px_Dmeson, py_Dmeson, ipT_Dmeson, RaaFile, v2File)
  
    # Dmeson Raa with dNdy
    y_bins = np.arange(-5, 5.5, 0.5)
    result_afterUrQMD = []
    for i in range(len(y_bins) - 1):
        y_lower = y_bins[i]
        y_higher = y_bins[i+1]
        cut = ((y>y_lower) & (y<y_higher))
        px_Dmeson = px[Dmeson_ID & cut]
        py_Dmeson = py[Dmeson_ID & cut]
        ipT_Dmeson = ipT[Dmeson_ID & cut]

        dNdpTdy, _ = Dmeson_dNdpTdy(collision_sys, px_Dmeson, py_Dmeson, ipT_Dmeson)
        result_afterUrQMD.append(dNdpTdy)

    result_afterUrQMD = np.array(result_afterUrQMD)
    outputFile = 'multi_Dmeson_dNdy_afterUrQMD.dat'
    np.savetxt(outputFile, result_afterUrQMD, fmt='%10.6f')



def calculate_diff_v2(collision_sys, urqmdFile, nsamples):
    if collision_sys == 'PbPb2760':
        pT_AA, dsigmadpT2_AA = np.loadtxt('LHC2760-AA2ccbar.dat', unpack=True)
    elif collision_sys == 'PbPb5020':
        pT_AA, dsigmadpT2_AA = np.loadtxt('LHC5020-AA2ccbar.dat', unpack=True)
    elif collision_sys == 'AuAu200':
        pT_AA, dsigmadpT2_AA = np.loadtxt('RHIC200-AA2ccbar.dat', unpack=True)
    else:
        print('not a valid system!')

    dsigmadpT_AA = pT_AA * dsigmadpT2_AA
    sigma_AA = dsigmadpT_AA.sum() * (pT_AA[1] - pT_AA[0])
    dsigmadpT_AA = dsigmadpT_AA/sigma_AA
    dfdpT = interp1d(pT_AA, dsigmadpT_AA)

    float_t = '<f8'
    int_t = '<i8'
    complex_t = '<c16'

    ID, charge, mass, px, py, pz, y, eta, ipT, wt = (
        np.array(col, dtype=dtype) for (col, dtype) in 
        zip(
            zip(*read_text_file(urqmdFile)),
            (2*[int] + 8*[float])
        )
    )

    pT = np.sqrt(px**2 + py**2)
    phi = np.arctan2(py,px)
    abs_ID = np.abs(ID)
    abs_eta = np.fabs(eta)
    light_ID = ((abs_ID !=411) & (abs_ID != 421) & (abs_ID !=10411) & (abs_ID !=10421))
    Dmeson_ID = (abs_ID == 411) | (abs_ID == 421) | (abs_ID == 10411) | (abs_ID == 10421)
    charged = (charge != 0)
    midrapidity = (np.fabs(y) < 0.5)

    #-----------------------------------------------------------------------------------------------
    # light hadron and D-meson differential v2
    phi_ALICE = phi[charged & (abs_eta<0.8) & (pT>0.2) & (pT<5.0) & light_ID]
    M_light = phi_ALICE.size
    Q2 = np.exp(1j*2*phi_ALICE).sum()
    Q3 = np.exp(1j*3*phi_ALICE).sum()
    Q4 = np.exp(1j*4*phi_ALICE).sum()

    phi_ALICE_a = phi[charged & (eta<0.8) & (eta>0.0) & (pT>0.2) & (pT<5.0) & light_ID]
    M_light_a = phi_ALICE_a.size
    Q2a = np.exp(1j*2*phi_ALICE_a).sum()
    Q3a = np.exp(1j*3*phi_ALICE_a).sum()
    Q4a = np.exp(1j*4*phi_ALICE_a).sum()


    phi_ALICE_b = phi[charged & (eta>-0.8) & (eta<0.0) & (pT>0.2) & (pT<5.0) & light_ID]
    M_light_b = phi_ALICE_b.size
    Q2b = np.exp(1j*2*phi_ALICE_b).sum()
    Q3b = np.exp(1j*3*phi_ALICE_b).sum()
    Q4b = np.exp(1j*4*phi_ALICE_b).sum()


    cut_Dmeson = (midrapidity & (pT>0.5) & (pT<39.5) & Dmeson_ID)
    phi_Dmeson = phi[cut_Dmeson]
    ipT_Dmeson = ipT[cut_Dmeson]
    pT_weight = dfdpT(ipT_Dmeson)

    M_Dmeson = (pT_weight).sum()
    Q2D = (np.exp(1j*2*phi_Dmeson) * pT_weight).sum()
    Q3D = (np.exp(1j*3*phi_Dmeson) * pT_weight).sum()
    Q4D = (np.exp(1j*4*phi_Dmeson) * pT_weight).sum()

    resultFile = 'result_v2.dat'
    with open(resultFile, 'w') as fo:
        print('nsamples ' + '%5d'%nsamples, file=fo)
        print('M ' + '%10d'%M_light, file=fo)
        print('Q2 ' + str(Q2), file=fo)
        print('Q3 ' + str(Q3), file=fo)
        print('Q4 ' + str(Q4), file=fo)
        print('Ma ' + '%10d'%M_light_a, file=fo)
        print('Q2a ' + str(Q2a), file=fo)
        print('Q3a ' + str(Q3a), file=fo)
        print('Q4a ' + str(Q4a), file=fo)
        print('Mb ' + '%10d'%M_light_b, file=fo)
        print('Q2b ' + str(Q2b), file=fo)
        print('Q3b ' + str(Q3b), file=fo)
        print('Q4b ' + str(Q4b), file=fo)
        
        print('M_Dmeson '+ '%10d'%M_Dmeson, file=fo)
        print('Q2_Dmeson ' + str(Q2D), file=fo)
        print('Q3_Dmeson ' + str(Q3D), file=fo)
        print('Q4_Dmeson ' + str(Q4D), file=fo)

        #-------------------------------------------------------------------------------
        print('charged hardon q2: ', file=fo)
        pT_bin = np.linspace(0.2, 5, 25)
        for i in range(len(pT_bin)-1):
            diff_cut = (charged & (abs_eta<0.8) & (pT>pT_bin[i]) & (pT<pT_bin[i+1]) & light_ID)
            phi_diff = phi[diff_cut]
            q2 = np.exp(1j*2*phi_diff).sum()
            mq = np.count_nonzero(phi_diff)
            print(str(pT_bin[i]) + '    ' + str(mq) + '    ' + str(q2), file=fo)

        print('Dmeson q2: ', file=fo)
        pT_bin2 = np.linspace(0.5, 39.5, 79)
        for i in range(len(pT_bin2)-1):
            diff_cut = (Dmeson_ID & (midrapidity) & (pT>pT_bin2[i]) & (pT<pT_bin2[i+1]))
            phi_Dmeson = phi[diff_cut]
            ipT_Dmeson = ipT[diff_cut]
            pT_weight = dfdpT(ipT_Dmeson)
            m_D = (pT_weight).sum()
            q2_Dmeson = (np.exp(1j*2*phi_Dmeson) * pT_weight).sum()
            print(str(pT_bin2[i]) + '    ' + str(m_D) + '    ' + str(q2_Dmeson), file=fo)

        #-------------------------------------------------------------------------------
        print('charged hardon q3: ', file=fo)
        pT_bin = np.linspace(0.2, 5, 25)
        for i in range(len(pT_bin)-1):
            diff_cut = (charged & (abs_eta<0.8) & (pT>pT_bin[i]) & (pT<pT_bin[i+1]) & light_ID)
            phi_diff = phi[diff_cut]
            q3 = np.exp(1j*3*phi_diff).sum()
            mq = np.count_nonzero(phi_diff)
            print(str(pT_bin[i]) + '    ' + str(mq) + '    ' + str(q3), file=fo)

        print('Dmeson q3: ', file=fo)
        pT_bin2 = np.linspace(0.5, 39.5, 79)
        for i in range(len(pT_bin2)-1):
            diff_cut = (Dmeson_ID & (midrapidity) & (pT>pT_bin2[i]) & (pT<pT_bin2[i+1]))
            phi_Dmeson = phi[diff_cut]
            ipT_Dmeson = ipT[diff_cut]
            pT_weight = dfdpT(ipT_Dmeson)
            m_D = (pT_weight).sum()
            q3_Dmeson = (np.exp(1j*3*phi_Dmeson) * pT_weight).sum()
            print(str(pT_bin2[i]) + '    ' + str(m_D) + '    ' + str(q3_Dmeson), file=fo)

        #-------------------------------------------------------------------------------
        print('charged hardon q4: ', file=fo)
        pT_bin = np.linspace(0.2, 5, 25)
        for i in range(len(pT_bin)-1):
            diff_cut = (charged & (abs_eta<0.8) & (pT>pT_bin[i]) & (pT<pT_bin[i+1]) & light_ID)
            phi_diff = phi[diff_cut]
            q4 = np.exp(1j*4*phi_diff).sum()
            mq = np.count_nonzero(phi_diff)
            print(str(pT_bin[i]) + '    ' + str(mq) + '    ' + str(q4), file=fo)

        print('Dmeson q4: ', file=fo)
        pT_bin2 = np.linspace(0.5, 39.5, 79)
        for i in range(len(pT_bin2)-1):
            diff_cut = (Dmeson_ID & (midrapidity) & (pT>pT_bin2[i]) & (pT<pT_bin2[i+1]))
            phi_Dmeson = phi[diff_cut]
            ipT_Dmeson = ipT[diff_cut]
            pT_weight = dfdpT(ipT_Dmeson)
            m_D = (pT_weight).sum()
            q4_Dmeson = (np.exp(1j*4*phi_Dmeson) * pT_weight).sum()
            print(str(pT_bin2[i]) + '    ' + str(m_D) + '    ' + str(q4_Dmeson), file=fo)


def main():
    nevents = 20
    condor_ID = sys.argv[1]
    fargs = open('args.conf', 'r')
    args = fargs.readline()
    collision_sys = 'PbPb5020'

    run_initial(collision_sys, nevents)

    for ievent in range(nevents):
        postfix = '{0}-{1}.dat'.format(condor_ID, str(ievent))
        initialFile = 'trento/initial/{}.dat'.format(str(ievent))
        initial_info_File = 'trento/initial/{}.info.dat'.format(str(ievent))

        shutil.copyfile(initialFile, 'vishnew/initial.dat')
        shutil.copyfile(initialFile, 'bmsap/initial.dat')
        shutil.copyfile(initialFile, 'HQ_sample/initial.dat')
        shutil.move(initial_info_File, 'sampler/')

        run_hydro()
        shutil.move('vishnew/surface.dat', 'sampler/surface.dat')
        shutil.move('vishnew/JetCtl.dat', 'diffusion/JetCtl.dat')
        shutil.move('vishnew/JetData.dat', 'diffusion/JetData.dat')

        run_HQsample()
        shutil.move('HQ_sample/initial_HQ.dat', 'diffusion/initial_HQ.dat')

        run_diffusion(args)
        shutil.move('diffusion/HQ_AAcY.dat', 'fragPLUSrecomb/HQ_AAcY.dat')

        os.chdir('fragPLUSrecomb')
        run_fragPLUSrecomb()
        os.chdir('../')
        shutil.move('fragPLUSrecomb/Dmeson_AAcY.dat', 'bmsap/Dmeson_AAcY.dat')

        os.chdir('bmsap/')
        participant_plane_angle()
        bmsap_multi(collision_sys)
        bmsap_v2(collision_sys)
        calculate_variable_beforeUrQMD(collision_sys, 'Dmeson_AAcY.dat')
        
        os.chdir('../')
        shutil.move('bmsap/Dmeson_AAcY.dat', 'urqmd-afterburner/Dmeson_AAcY.dat')
        shutil.move('bmsap/pp_angle.dat', 'urqmd-afterburner/pp_angle.dat')
        shutil.move('bmsap/initial.dat', 'urqmd-afterburner/initial.dat')

        nsamples = run_afterburner(ievent)

        if nsamples != 0:
            shutil.copyfile('bmsap/spectra/LHC2760-AA2ccbar.dat', 'urqmd-afterburner/LHC2760-AA2ccbar.dat')
            shutil.copyfile('bmsap/spectra/LHC5020-AA2ccbar.dat', 'urqmd-afterburner/LHC5020-AA2ccbar.dat')
            shutil.copyfile('bmsap/spectra/RHIC200-AA2ccbar.dat', 'urqmd-afterburner/RHIC200-AA2ccbar.dat')
            os.chdir('urqmd-afterburner/')
            calculate_variable(collision_sys, 'urqmd_final.dat', nsamples)
            calculate_diff_v2(collision_sys, 'urqmd_final.dat', nsamples)
            os.chdir('../')

            #shutil.move('urqmd-afterburner/Dmeson_AAcY.dat', 'results/Dmeson_AAcY'+postfix)
            #shutil.move('urqmd-afterburner/urqmd_final.dat', 'results/urqmd_final'+postfix)
            #shutil.move('urqmd-afterburner/urqmd_final.dat', 'urqmd_final' + postfix)
            shutil.move('urqmd-afterburner/result.dat', 'results/result'+postfix)
            shutil.move('urqmd-afterburner/result_v2.dat', 'results/result_v2' + postfix)
            shutil.move('sampler/{0}.info.dat'.format(str(ievent)), 'results/event_info'+postfix)
            shutil.move('bmsap/multi_AAcY.dat', 'results/multi_AAcY'+postfix)
            shutil.move('bmsap/v2_AAcY.dat', 'results/v2_AAcY' + postfix)
            shutil.move('bmsap/multi_AAcY_beforeUrqmd.dat', 'results/multi_AAcY_beforeUrqmd'+postfix)
            shutil.move('bmsap/v2_AAcY_beforeUrqmd.dat', 'results/v2_AAcY_beforeUrqmd'+postfix)

            #shutil.move('urqmd-afterburner/initial.dat', 'results/initial' + postfix)
            #shutil.move('diffusion/initial_HQ.dat','results/initial_HQ'+postfix)
            shutil.move('urqmd-afterburner/pp_angle.dat', 'results/pp_angle'+postfix)
            shutil.move('urqmd-afterburner/multi_AAcY_urqmd.dat', 'results/multi_AAcY_urqmd'+postfix)
            shutil.move('urqmd-afterburner/v2_AAcY_urqmd.dat', 'results/v2_AAcY_urqmd'+postfix)

            shutil.move('urqmd-afterburner/multi_AAcY_urqmd_y1.dat', 'results/multi_AAcY_urqmd_y1_'+postfix)
            shutil.move('urqmd-afterburner/v2_AAcY_urqmd_y1.dat', 'results/v2_AAcY_urqmd_y1_'+postfix)

            shutil.move('urqmd-afterburner/multi_AAcY_urqmd_y0d8.dat', 'results/multi_AAcY_urqmd_y0d8_'+postfix)
            shutil.move('urqmd-afterburner/v2_AAcY_urqmd_y0d8.dat', 'results/v2_AAcY_urqmd_y0d8_'+postfix)
            
            shutil.move('bmsap/multi_Dmeson_dNdy_beforeUrQMD.dat', 'results/multi_Dmeson_dNdy_beforeUrQMD'+postfix)
            shutil.move('urqmd-afterburner/multi_Dmeson_dNdy_afterUrQMD.dat', 'results/multi_Dmeson_dNdy_afterUrQMD'+postfix)
            continue
        else:
            print('No particle produced in this event')
            continue

if __name__ == "__main__":
    main()
            

