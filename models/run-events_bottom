#!/usr/bin/env python3

"""
run full space-time HQ evolution in heavy-ion collisions (seperated in several stages):
    -- initial condition (trento + HQ_sample)
    -- hydro (2+1D VishNew)
    -- HQ transport (Langevin)
    -- HQ hardonization (fragmentation + recombination)
    -- light hadron particalization (osu-sampler)
    -- hadronic afterburner (UrQMD)
"""

import itertools 
import sys, os
import subprocess
import numpy as np
import h5py
import shutil
from scipy.interpolate import interp1d

def run_cmd(*args, **kwargs):
    print(*args, flush=True)
    subprocess.check_call(list(itertools.chain.from_iterable(a.split() for a in args)), **kwargs)


def read_text_file(fileName):
    with open(fileName, 'r') as f:
        result = [l.split() for l in f if not l.startswith('#')]

    ID, charge, mass, px, py, pz, y, eta, ipT, wt = (
        np.array(col, dtype=dtype) for (col, dtype) in 
        zip(zip(*result), (2*[int]+8*[float]))
    )
    return ID, charge, px, py, pz, y, eta, ipT


def read_oscar_file(fileName):
    try:
        with open(fileName, 'r') as f:
            result = [l.replace('D','E').split() for l in f if len(l.split()) == 19]

        NUM, ID, px, py, pz, p0, mass, rx, ry, rz, r0, temp, c_vx, c_vy, c_vz, ed, ip0, ipT, wt = (
            np.array(col, dtype=dtype) for (col, dtype) in 
            zip(zip(*result), (2*[int]+17*[float]))
        )
    except ValueError as e:
        handle = str(e).split()[-1]
        with open(fileName, 'r') as f:
            result = [l.replace('D', 'E').replace(handle, ' 0 ').split() for l in f if len(l.split()) == 19]
            NUM, ID, px, py, pz, p0, mass, rx, ry, rz, r0, temp, c_vx, c_vy, c_vz, ed, ip0, ipT, wt = (
                np.array(col, dtype=dtype) for (col, dtype) in 
                zip(zip(*result), (2*[int]+17*[float]))
            )

    return ID, px, py, pz, p0, ipT


def run_initial(collision_sys, nevents):
    if collision_sys == 'AuAu200':
        run_cmd('./trento Au Au ', str(nevents),
                '--cross-section 4.2',
                '--grid-max 13.05 --grid-step 0.1',
                '--normalization 60 --fluctuation 1.6 --nucleon-width 0.49',
                '--output initial', cwd='trento')
    elif collision_sys == 'PbPb5020':
         run_cmd('./trento Pb Pb ', str(nevents),
                '--cross-section 7.0',
                '--grid-max 13.05 --grid-step 0.1',
                '--normalization 160 --fluctuation 1.6 --nucleon-width 0.51',
                '--output initial', cwd='trento')
    elif collision_sys == 'PbPb2760':
         run_cmd('./trento Pb Pb ', str(nevents),
                '--cross-section 6.4',
                '--grid-max 13.05 --grid-step 0.1',
                '--normalization 131 --fluctuation 1.6 --nucleon-width 0.51',
                '--output initial', cwd='trento')
    else: 
        print(collision_sys, ' currently not implemented!')


def run_hydro():
    run_cmd('./vishnew etas=0.08 etas_slope=0.75 vishbulknorm=1.1 edec=0.24', cwd='vishnew')


def run_HQsample():
    run_cmd('./HQ_sample HQ_sample.conf', cwd='HQ_sample')


def run_qhat(args):
    run_cmd('./qhat_pQCD', str(args), cwd='qhat_pQCD')
    args_list = args.split()
    if args_list[0] == '--mass':
        mass = float(args_list[1])
    elif args_list[2] == '--mass':
        mass = float(args_list[3])

    if np.abs(mass - 1.3) < 0.2:
        flavor = 'charm'
    elif np.abs(mass - 4.2) < 0.2:
        flavor = 'bottom'


    gridE = 101
    gridT = 31
    qhat_Qq2Qq = h5py.File('qhat_pQCD/qhat_Qq2Qq.hdf5', 'r')['Qhat-tab']
    qhat_Qg2Qg = h5py.File('qhat_pQCD/qhat_Qg2Qg.hdf5', 'r')['Qhat-tab']
    rate_Qq2Qq = h5py.File('qhat_pQCD/rQq2Qq.hdf5', 'r')['Rates-tab']
    rate_Qg2Qg = h5py.File('qhat_pQCD/rQg2Qg.hdf5', 'r')['Rates-tab']

    GeV_to_fmInv = 5.068
    fmInv_to_GeV = 0.1973

    E = np.linspace(mass*1.01, 140., gridE)
    temp = np.linspace(0.15, 0.75, gridT)

    kperp = qhat_Qq2Qq[2,:,:] + qhat_Qg2Qg[2,:,:]
    qhat_over_T3 = 2 * kperp / temp**3

    tempM, EM = np.meshgrid(temp, E)

    res = []
    for i in range(len(kperp)):
        for j in range(len(kperp[i])):
            dum = np.array([tempM[i,j], EM[i,j], qhat_over_T3[i,j]])
            res.append(dum)

    res = np.array(res)
    np.savetxt('qhat_pQCD/gamma-table_{}.dat'.format(flavor), res, header = 'temp energy qhat_over_T3', fmt='%10.6f')




def run_diffusion(args):
    os.environ['ftn10'] = 'dNg_over_dt_bD6.dat'
    os.environ['ftn20'] = 'HQ_AAcY.dat'
    os.environ['ftn30'] = 'initial_HQ.dat'
    run_cmd('./diffusion', str(args), cwd='diffusion')


def run_fragPLUSrecomb():
    os.environ['ftn20'] = 'Dmeson_AAcY.dat'
    child1 = 'cat HQ_AAcY.dat'
    p1 = subprocess.Popen(child1.split(), stdout = subprocess.PIPE)
    p2 = subprocess.Popen('./fragPLUSrecomb', stdin = p1.stdout)
    p1.stdout.close()
    output = p2.communicate()[0]

def participant_plane_angle():
    initialFile = 'initial.dat'
    pp_angleFile = 'pp_angle.dat'
    ed = np.loadtxt(initialFile)
    x_init = np.linspace(-13, 13, 261)
    y_init = np.linspace(-13, 13, 261)
    rx0, ry0 = np.meshgrid(x_init, y_init)
    x0 = np.sum(rx0 * ed) / np.sum(ed)
    y0 = np.sum(ry0 * ed) / np.sum(ed)
    rx = rx0 - x0
    ry = ry0 - y0

    r = np.sqrt(rx**2 + ry**2)
    phi = np.arctan2(ry, rx)
    aver_cos2 = np.sum(r**2 * np.cos(2*phi) * ed) / np.sum(ed)
    aver_sin2 = np.sum(r**2 * np.sin(2*phi) * ed) / np.sum(ed)
    psi = 0.5 * np.arctan2(aver_sin2, aver_cos2)

    astring = 'psi = {}'.format(str(psi))
    f = open(pp_angleFile, 'w')
    f.write(astring)
    f.close()
    return psi

        
def bmsap_multi(spectraFile):
    sampleFile = 'sample_multi.in'

    multiFile  = 'multi_AAcY.dat'
    DmesonFile = 'Dmeson_AAcY.dat'
    os.environ['ftn09'] = sampleFile
    os.environ['ftn10'] = 'spectra/'+ spectraFile
    os.environ['ftn13'] = multiFile

    child2 = 'cat ' + DmesonFile
    p3 = subprocess.Popen(child2.split(), stdout = subprocess.PIPE)
    p4 = subprocess.Popen('./bmsap', stdin = p3.stdout)
    p3.stdout.close()
    output = p4.communicate()[0]


def bmsap_v2(spectraFile):
    sampleFile = 'sample.in'

    v2File = 'v2_AAcY.dat'
    DmesonFile = 'Dmeson_AAcY.dat'
    angleFile = 'pp_angle.dat'
    os.environ['ftn09'] = sampleFile
    os.environ['ftn10'] = 'spectra/'+spectraFile
    os.environ['ftn13'] = v2File
    os.environ['ftn24'] = angleFile
    child3 = 'cat ' + DmesonFile
    p5 = subprocess.Popen(child3.split(), stdout = subprocess.PIPE)
    p6 = subprocess.Popen('./bmsap', stdin = p5.stdout)
    p5.stdout.close()
    output = p6.communicate()[0]


def run_afterburner(ievent):
    """
    particalization + UrQMD afterburner
    input: sampler/surface.dat
    output: urqmd_inputFile (urqmd/urqmd_initial.dat)
    return: nsamples (number of oversampled urqmd events)
    """
    surfaceFile = 'sampler/surface.dat'
    eventinfo_File = 'sampler/{0}.info.dat'.format(ievent)

    # now particalize the hypersurface
    if os.stat(surfaceFile).st_size == 0:
        print('empty hypersurface')
        return 0

    finfo = open(eventinfo_File, 'r')
    finfo.seek(0)
    for line in finfo:
        inputline = line.split()
        if len(inputline) > 1 and inputline[0] == 'mult':
            initial_mult = float(inputline[2])
        else:
            continue
    finfo.close()

    nsamples = min(max(int(2*1e5/initial_mult), 2), 100)
    run_cmd('./sampler oversamples={}'.format(nsamples), cwd='sampler')

    # a non-empty hypersurface can still emit zero particles. If no particles is produced, the output 
    # will contain the three-line oscar header and nothing else. In this case, throw this event
    with open('sampler/oscar.dat', 'rb') as f:
        if next(itertools.islice(f, 3, None), None) is None:
            print('no particle emitted')
            return 0

    run_cmd('./afterburner {} urqmd_final.dat'.format(nsamples), cwd='urqmd-afterburner')
    return nsamples


def calculate_Dmeson_Raa(spectraFile, ID_, px_, py_, initial_pT_):
    if os.path.isdir('spectra'):
        spectraFolder = './spectra/'
    else:
        spectraFolder = './'

    spectraFile = spectraFolder + spectraFile

    pT_AA, dsigmadpT2_AA = np.loadtxt(spectraFile, unpack=True)
    dsigmadpT_AA = pT_AA * dsigmadpT2_AA
    sigma_AA = dsigmadpT_AA.sum() * (pT_AA[1] - pT_AA[0])
    dsigmadpT_AA = dsigmadpT_AA / sigma_AA
    dfdpT = interp1d(pT_AA, dsigmadpT_AA)

    final_pT = np.sqrt(px_**2 + py_**2)

    Raa_result = []
    pT_weight = dfdpT(initial_pT_)
    dNdpT, pT_bins = np.histogram(final_pT, bins=100, range=(0, 100.0), weights = pT_weight)
    Raa_result.append(pT_bins[:-1])
    Raa_result.append(dNdpT)


    ID_labels = [511, 521, 513, 523]
    for label in ID_labels:
        initial_pT_label = initial_pT_[ID_ == label]
        final_pT_label = final_pT[ID_ == label]
        if (len(initial_pT_label) > 0):
            pT_weight = dfdpT(initial_pT_label)
            dNdpT_, pT_bins = np.histogram(final_pT_label, bins=100, range=(0, 100.0), weights=pT_weight)
            Raa_result.append(dNdpT_)

    return np.array(Raa_result).T



def calculate_Dmeson_v2_EP(spectraFile, ID_, px_, py_, initial_pT_):
    if os.path.isdir('spectra'):
        spectraFolder = './spectra/'
    else:
        spectraFolder = './'

    spectraFile = spectraFolder + spectraFile

    pT_AA, dsigmadpT2_AA = np.loadtxt(spectraFile, unpack=True)
    dsigmadpT_AA = pT_AA * dsigmadpT2_AA 
    sigma_AA = dsigmadpT_AA.sum() * (pT_AA[1] - pT_AA[0])
    dsigmadpT_AA = dsigmadpT_AA / sigma_AA
    dfdpT = interp1d(pT_AA, dsigmadpT_AA)

    final_pT = np.sqrt(px_**2 + py_**2)
    pT_weight = dfdpT(initial_pT_)

    if os.path.isfile('pp_angle.dat'):
        angle = open('pp_angle.dat', 'r').readline().split('=')[-1]
        angle = float(angle)
    else:
        angle = 0
        print('pp_angle.dat not found.')

    final_v2 = ((py_**2 - px_**2) * np.cos(2*angle) + 2 * px_*py_*np.sin(2*angle)) / (final_pT**2)
    final_v2_with_weight = final_v2 * pT_weight

    v2_result = []
    pT_bins = np.linspace(0.0, 100.0, 101)
    v2_result.append(pT_bins[:-1])

    dum_v2 = []
    dum_weight = []
    for i in range(len(pT_bins)-1):
        cut = (final_pT > pT_bins[i]) & (final_pT < pT_bins[i+1])
        v2_sum = final_v2_with_weight[cut].sum()
        weight_sum = pT_weight[cut].sum()
        try:
            dum_v2.append(v2_sum/weight_sum)
        except ZeroDivisionError:
            dum_v2.append(0)
        dum_weight.append(weight_sum)

    v2_result.append(np.array(dum_v2))
    v2_result.append(np.array(dum_weight))

    ID_labels = [511, 521, 513, 523]
    for label in ID_labels:
        if len(ID_[ID_==label]) > 0:
            dum_v2 = []
            dum_weight = []
            for i in range(len(pT_bins) -1):
                cut = (final_pT >= pT_bins[i]) & (final_pT < pT_bins[i+1]) & (ID_ == label)
                v2_sum = final_v2_with_weight[cut].sum()
                weight_sum = pT_weight[cut].sum()
                try:
                    dum_v2.append(v2_sum/weight_sum)
                except ZeroDivisionError:
                    dum_v2.append(0)
                dum_weight.append(weight_sum)

            v2_result.append(np.array(dum_v2))
            v2_result.append(np.array(dum_weight))

    return np.array(v2_result).T



def calculate_Dmeson_dNdphidpT(spectraFile, px_, py_, phi_, initial_pT_):
    if os.path.isdir('spectra'):
        spectraFolder = './spectra/'
    else:
        spectraFolder = './'

    spectraFile = spectraFolder + spectraFile

    pT_AA, dsigmadpT2_AA = np.loadtxt(spectraFile, unpack=True)
    dsigmadpT_AA = pT_AA * dsigmadpT2_AA
    sigma_AA = dsigmadpT_AA.sum() * (pT_AA[1] - pT_AA[0])
    dsigmadpT_AA = dsigmadpT_AA / sigma_AA
    dfdpT = interp1d(pT_AA, dsigmadpT_AA)
    
    pT_ = np.sqrt(px_**2 + py_**2)
    pT_weight = dfdpT(initial_pT_)

    H, xbins, ybins = np.histogram2d(pT_, phi_, bins=(100, 50), range=[[0, 100], [-np.pi, np.pi]], weights=pT_weight)

    return (H, xbins, ybins)



def calculate_Dmeson_dNdydpT(spectraFile, px_, py_, y_, initial_pT_):
    if os.path.isdir('spectra'):
        spectraFolder = './spectra/'
    else:   
        spectraFolder = './'

    spectraFile = spectraFolder + spectraFile

    pT_AA, dsigmadpT2_AA = np.loadtxt(spectraFile, unpack=True)
    dsigmadpT_AA = pT_AA * dsigmadpT2_AA
    sigma_AA = dsigmadpT_AA.sum() * (pT_AA[1] - pT_AA[0])
    dsigmadpT_AA = dsigmadpT_AA / sigma_AA
    dfdpT = interp1d(pT_AA, dsigmadpT_AA)

    pT_ = np.sqrt(px_**2 + py_**2)
    pT_weight = dfdpT(initial_pT_)
    H, xbins, ybins = np.histogram2d(pT_, y_, bins=(100, 60), range=[[0, 100], [-3, 3]], weights=pT_weight)

    return (H, xbins, ybins)




def calculate_beforeUrQMD(spectraFile, ievent, DmesonFile):
    ID, px, py, pz, p0, ipT = read_oscar_file(DmesonFile)
    abs_ID = np.abs(ID)
    Dmeson_ID = ((abs_ID == 511) | (abs_ID == 521) | (abs_ID == 513) | (abs_ID == 523))
    y = 0.5 * np.log((p0 + pz)/(p0 - pz))
    phi = np.arctan2(py, px)
    resultFile = 'result_beforeUrQMD.hdf5'
    fres = h5py.File(resultFile, 'w')

    #---------------- light hadron --------------------
    group_light = fres.create_group('light hadron')
    infoFile = '../urqmd-afterburner/{}.info.dat'.format(ievent)
    i = 2
    with open(infoFile, 'r') as finfo:
        for line in finfo:
            inputline = line.split()
            if len(inputline) == 3:
                if group_light.attrs.get(inputline[0], 0) == 0:
                    group_light.attrs.create(inputline[0], float(inputline[2]))
                else:
                    i += 1
                    group_light.attrs.create(inputline[0]+str(i), float(inputline[2]))

    initialFile = 'initial.dat'
    dum_sd = np.loadtxt(initialFile)
    dum_weight = (dum_sd*dum_sd).sum()
    group_light.attrs.create('weight-TAA', dum_weight)

    #------------ Dmeson midrapidity ------------------------
    group_Dmeson = fres.create_group('Dmeson')
    group_Dmeson.attrs.create('NDmeson', np.count_nonzero(Dmeson_ID))

    def write_rapidity(ycut):
        midrapidity = (np.fabs(y) < 0.5)
        ID_Dmeson = abs_ID[Dmeson_ID & midrapidity]
        px_Dmeson = px[Dmeson_ID & midrapidity]
        py_Dmeson = py[Dmeson_ID & midrapidity]
        phi_Dmeson = phi[Dmeson_ID & midrapidity]
        ipT_Dmeson = ipT[Dmeson_ID & midrapidity]

        Raa_result = calculate_Dmeson_Raa(spectraFile, ID_Dmeson,px_Dmeson, py_Dmeson, ipT_Dmeson)
        group_Dmeson.create_dataset('multi_Dmeson_y_lt_0d5', data = Raa_result)
        v2_result =calculate_Dmeson_v2_EP(spectraFile, ID_Dmeson, px_Dmeson, py_Dmeson, ipT_Dmeson)
        group_Dmeson.create_dataset('v2_Dmeson_y_lt_0d5_EP', data = v2_result)

    write_rapidity(0.5)
    write_rapidity(2.4)
 
    # ----------- Dmeson dNdpTdy
    (Raa_result, bin1, bin2) = calculate_Dmeson_dNdydpT(spectraFile, px[Dmeson_ID], py[Dmeson_ID], y[Dmeson_ID], ipT[Dmeson_ID])
    ds_multi = group_Dmeson.create_dataset('multi_Dmeson_dNdydpT', data = Raa_result)
    ds_multi.attrs.create('pT_min', bin1[0])
    ds_multi.attrs.create('pT_max', bin1[-1])
    ds_multi.attrs.create('dpT', bin1[1] - bin1[0])
    ds_multi.attrs.create('y_min', bin2[0])
    ds_multi.attrs.create('y_max', bin2[-1])
    ds_multi.attrs.create('dy', bin2[1] - bin2[0])


    #### --- Dmeson dNdpTdphi (mid-rapidity)
    def write_rapidity_dNdphi(ycut):
        midrapidity = (np.fabs(y) < ycut)
        dum_ID = abs_ID[Dmeson_ID & midrapidity]
        dum_px = px[Dmeson_ID & midrapidity]
        dum_py = py[Dmeson_ID & midrapidity]
        dum_ipT = ipT[Dmeson_ID & midrapidity]
        dum_phi = phi[Dmeson_ID & midrapidity]

        Raa_result, bin1, bin2 = calculate_Dmeson_dNdphidpT(spectraFile, dum_px, dum_py, dum_phi, dum_ipT)
        ds_multi2 = group_Dmeson.create_dataset('multi_Dmeson_dNdphidpT_y_lt_%s'%ycut, data = Raa_result)
        ds_multi2.attrs.create('pT_min', bin1[0])
        ds_multi2.attrs.create('pT_max', bin1[-1])
        ds_multi2.attrs.create('dpT', bin1[1] - bin1[0])
        ds_multi2.attrs.create('phi_min', bin2[0])
        ds_multi2.attrs.create('phi_max', bin2[1])
        ds_multi2.attrs.create('dphi', bin2[1] - bin2[0])

    write_rapidity_dNdphi(2.4)

    fres.close()




def main():
    collision_sys = 'PbPb5020'
    nevents = 20

    if collision_sys == 'PbPb2760':
        #spectraFile = 'LHC2760-AA2ccbar.dat'
        spectraFile = 'LHC2760-AA2bbbar.dat'
    elif collision_sys == 'PbPb5020':
        #spectraFile = 'LHC5020-AA2ccbar.dat'
        spectraFile = 'LHC5020-AA2bbbar.dat'
    elif collision_sys == 'AuAu200':
        #spectraFile = 'RHIC200-AA2ccbar.dat'
        spectraFile = 'RHIC200-AA2bbbar.dat'
    else:
        print(collision_sys, ' currently not implemented!')


    # parse the config file
    if len(sys.argv) == 3:
        with open(sys.argv[1], 'r') as f:
            config = dict((i.strip() for i in l.split('=', maxsplit=1)) for l in f)
            condor_ID = sys.argv[2]
    else:
        config = {}
        condor_ID = 0

    ## for debug
    print(config)

    run_initial(collision_sys, nevents)
    run_qhat(config.get('qhat_args', ''))
    shutil.copyfile('qhat_pQCD/gamma-table_bottom.dat', 'diffusion/gamma-table_bottom.dat')

    for ievent in range(nevents):
        postfix = '{}-{}.dat'.format(condor_ID, ievent)
        initialFile = 'trento/initial/{}.dat'.format(ievent)
        initial_info_File = 'trento/initial/{}.info.dat'.format(ievent)

        shutil.copyfile(initialFile, 'vishnew/initial.dat')
        shutil.copyfile(initialFile, 'bmsap/initial.dat')
        shutil.copyfile(initialFile, 'HQ_sample/initial.dat')
        shutil.copyfile(initial_info_File, 'sampler/{}.info.dat'.format(ievent))
        shutil.copyfile(initial_info_File, 'urqmd-afterburner/{}.info.dat'.format(ievent))

        run_hydro()
        shutil.move('vishnew/surface.dat', 'sampler/surface.dat')
        shutil.move('vishnew/JetData.h5', 'diffusion/JetData.h5')

        run_HQsample()
        shutil.move('HQ_sample/initial_HQ.dat', 'diffusion/initial_HQ.dat')

        run_diffusion(config.get('diffusion_args', ''))
        shutil.move('diffusion/HQ_AAcY.dat', 'fragPLUSrecomb/HQ_AAcY.dat')

        os.chdir('fragPLUSrecomb/')
        run_fragPLUSrecomb()
        os.chdir('../')
        shutil.move('fragPLUSrecomb/Dmeson_AAcY.dat', 'bmsap/Dmeson_AAcY.dat')

        os.chdir('bmsap/')
        participant_plane_angle()
        bmsap_multi(spectraFile)
        bmsap_v2(spectraFile)
        calculate_beforeUrQMD(spectraFile, ievent, 'Dmeson_AAcY.dat')

        os.chdir('../')
        shutil.copyfile('bmsap/Dmeson_AAcY.dat', 'urqmd-afterburner/Dmeson_AAcY{}-{}.dat'.format(condor_ID, ievent))
        shutil.copyfile('bmsap/pp_angle.dat', 'urqmd-afterburner/pp_angle.dat')
        shutil.copyfile('bmsap/initial.dat', 'urqmd-afterburner/initial.dat')

        shutil.move('bmsap/multi_AAcY.dat', 'results/multi_AAcY{}-{}.dat'.format(condor_ID, ievent))
        shutil.move('bmsap/v2_AAcY.dat', 'results/v2_AAcY{}-{}.dat'.format(condor_ID, ievent))
        shutil.move('bmsap/result_beforeUrQMD.hdf5', 'results/result_beforeUrQMD{}-{}.hdf5'.format(condor_ID, ievent))

        


if __name__ == '__main__':
    main()
